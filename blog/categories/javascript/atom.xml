<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: javascript | フリーランチなど無い]]></title>
  <link href="http://tanstaafl.0pt.jp/blog/categories/javascript/atom.xml" rel="self"/>
  <link href="http://tanstaafl.0pt.jp/"/>
  <updated>2013-05-31T23:10:57+09:00</updated>
  <id>http://tanstaafl.0pt.jp/</id>
  <author>
    <name><![CDATA[Minori Tokuda]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[JSONとJSONPの違い]]></title>
    <link href="http://tanstaafl.0pt.jp/blog/2010/11/17/75eb52a3779e/"/>
    <updated>2010-11-17T21:12:05+09:00</updated>
    <id>http://tanstaafl.0pt.jp/blog/2010/11/17/75eb52a3779e</id>
    <content type="html"><![CDATA[<p>Twitter APIで取得していたコメントが消えてしまった。Twitter検索で引っかかるのは7日間だけである。これでは少し寂しいのでツイートの取得にTopsyを利用してみた。Topsyはツイッター等の発言をベースにした検索エンジンで、公開されたAPIから特定のサイトについてのツイートを抽出して取得するといったことが出来る。</p>

<p>それでTopsyのAPIをjQueryの機能で取得してみようとしたのだがjsonを取得しようとするとリクエストは200 OKを返すのにデータが取得出来ない。jQueryが原因かと思って色々調べてみたのだが違うようだ。原因はスクリプトの実行元と異なるドメインのデータをxmlHttpRequestでは取得出来ないかららしい。何故このようにしているかというとクロスサイトスクリプティングを防止するためのようだ。しかしこの制限にも抜け道がある。それがJSONPである。</p>

<p>JSONPはscriptタグを利用してリモートのデータを読み込む。JSONの実体がjavascriptのコードであることを利用しているのだ。そしてコールバックを実行してデータを再生する。シンプルな仕組みである。</p>

<p>参考にしたのはここのサイトである（jQueryはJSONPの理解の妨げになるか？）。
僕は今までJSONとJSONPについて違いがよくわかっておらず、単にコールバックを指定するのがJSONPだと思っていた。しかしAjaxの処理にはデータ形式によらずコールバックを使うのだからこれでは違いにならない。scriptタグを利用したデータの読み込みこそがJSONPだったのだ。こういうことはjQueryの解説サイトにはあんまり書いていない。Ajax技術としては常識なんだろうけどjQueryでAjaxを始めた人のためにも是非啓蒙して欲しいと思う。</p>

<p>まとめ</p>

<p>JSONを含め通常Ajaxで使うxmlHttpRequestでは外部サイトのデータを取得出来ない(XSS対策）
JSONPはscriptタグで外部サイトを読み込むことで上記を回避している
jQueryではJSONとJSONPを同じように扱えるが両者はまったく由来の異なる技術である。</p>

<p>JSONはただのデータ形式（javascriptのオブジェクトをtext化したもの）
JSONPはデータを読み込むための技術（javascriptコードの読み込み）</p>

<p>Ajaxではデータの受け渡しの形式としてどちらも用いられている。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Twitterでコメント2]]></title>
    <link href="http://tanstaafl.0pt.jp/blog/2010/11/08/ec3b981577bc/"/>
    <updated>2010-11-08T14:07:59+09:00</updated>
    <id>http://tanstaafl.0pt.jp/blog/2010/11/08/ec3b981577bc</id>
    <content type="html"><![CDATA[<p>前回作ったコメントシステムだがコードは単純だ。TwitterのSearch APIをjQuery.ajaxで叩くだけだ。
戻り値はjsonなので処理も簡単に出来る。ハマったのはcallbackを指定しないとjsonが取れないということだ。APIの説明を読んでもOptionalだと書いてあるのだが、どうも必須なようなので取りあえず空で指定してある。取得するコードは以下でjsonを取得したあとはjQueryを使ってHTMLに挿入している。</p>

<p>var thisurl = encodeURI(encodeURI(decodeURI(window.location.href)));
$.ajax({
  url :&ldquo;<a href="http://search.twitter.com/search.json">http://search.twitter.com/search.json</a>&rdquo;,
  dataType : &ldquo;json&rdquo;,
  data : &ldquo;callback=?&amp;q=&rdquo;+thisurl+&ldquo;&amp;show_user=false&rdquo;,
  success : function(json){
  //表示処理
  }
})</p>

<p>Tweetボタンはここから貼付けた。自動生成で簡単にスクリプトが出来る。
シンプルだがこのブログには十分だろう。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Twitterでコメント]]></title>
    <link href="http://tanstaafl.0pt.jp/blog/2010/11/08/1db91739f81f/"/>
    <updated>2010-11-08T04:15:43+09:00</updated>
    <id>http://tanstaafl.0pt.jp/blog/2010/11/08/1db91739f81f</id>
    <content type="html"><![CDATA[<p>Disqusを止めて、コメントシステムをTwitterで管理するようにした。理由は出来る限りシンプルにしたかったことと、Twitter APIを試してみたかったためである。</p>

<p>ただし、現状コメント機能は無いので外部でつぶやかれたURLをトラックバックするだけの機能である。</p>

<p>追記：とりあえず、Twitter公式のボタンを挿入した。シンプルでよし。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[SafariのLocationエンコードについて2]]></title>
    <link href="http://tanstaafl.0pt.jp/blog/2010/11/05/a0afd3acb280/"/>
    <updated>2010-11-05T16:01:23+09:00</updated>
    <id>http://tanstaafl.0pt.jp/blog/2010/11/05/a0afd3acb280</id>
    <content type="html"><![CDATA[<p>前回、SafariでエスケープされたURLのサイトを表示したときに、location.hrefでアドレスを取得するとデコードした文字列が取得されてしまう問題について、webkitのブラウザを判別するスクリプトを書いて対応した。
その後、ChromeだとURLがきちんとエスケープされて取得されることが分かった。僕はchromeは普段使わないのでこの仕様の違いに気付かなかったのである。</p>

<p>どうやって判別するか悩んでいたのだが、結局decodeURLでエスケープされていないURLをデコードしても結果が変わらないことに着目して以下の対応とした。</p>

<p>  var disqus_url = encodeURI(decodeURI(window.location.href));</p>

<p>エンコードされたURL（Firefox,Chrome,etc）だけがdecodeURIされ、その後再びencodeURIされるので正しくエスケープされたURLが取得出来る。
URLの下位パスをタイトルから生成していたのでこのような問題となったのだから、そこを改めた方がよいのかもしれない。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[SafariのLocationエンコードについて]]></title>
    <link href="http://tanstaafl.0pt.jp/blog/2010/10/31/18ea9bf6b0bc/"/>
    <updated>2010-10-31T23:39:46+09:00</updated>
    <id>http://tanstaafl.0pt.jp/blog/2010/10/31/18ea9bf6b0bc</id>
    <content type="html"><![CDATA[<p>やっぱりDisqusがSafariでうまく動作しない。どうも記事ごとにうまく読み込めるかエラーを起こすが決まっているようなので調べるとうまく動作しないのはタイトルがマルチバイトの記事だけだった。</p>

<p>このブログの各記事のリンクは全てURLをエスケープしてあるのだが、Safariでwindow.location.hrefを取得するとエスケープ前のURLになってしまうのがエラーの原因であるようだ。ちなみにFirefoxでは再現しない。何故このような仕様になっているのか理解に苦しむのだがご存知の方がいたら教えてもらいたい。（バグなんだろうか）。</p>

<p>ちなみに以下のコードを埋め込むことで一応Safariでのエラーは無くなった。あまりスマートなコードではないが仕方が無い。</p>

<p>if(!jQuery.support.checkOn){
  var disqus_url = encodeURI(window.location.href);
}</p>

<p>ちなみにjQueryでのブラウザ判別については「jQuery.supportでのブラウザ判別」を参照した。分かりやすいまとめで助かった。</p>
]]></content>
  </entry>
  
</feed>
