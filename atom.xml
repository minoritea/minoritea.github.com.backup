<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[フリーランチなど無い]]></title>
  <link href="http://tanstaafl.0pt.jp/atom.xml" rel="self"/>
  <link href="http://tanstaafl.0pt.jp/"/>
  <updated>2013-05-31T23:35:23+09:00</updated>
  <id>http://tanstaafl.0pt.jp/</id>
  <author>
    <name><![CDATA[Minori Tokuda]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[flickrの画像をOctopressに埋め込むTips]]></title>
    <link href="http://tanstaafl.0pt.jp/blog/2013/05/31/c1143b3e227b/"/>
    <updated>2013-05-31T21:56:00+09:00</updated>
    <id>http://tanstaafl.0pt.jp/blog/2013/05/31/c1143b3e227b</id>
    <content type="html"><![CDATA[<p>Octopressの画像置き場をどうするか考えてflickrにしてみた。</p>

<p>public/images以下に置いておくのがデフォルトなんだろうけど、
githubにあんまりバイナリを置くのも悪いしなぁと思って色々探していた。</p>

<p>見つけたのが、octopress-flickr。
<a href="https://github.com/neilk/octopress-flickr">https://github.com/neilk/octopress-flickr</a></p>

<p>OctopressのGemfileに以下を追加して、</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">gem</span> <span class="s1">&#39;flickraw&#39;</span>
</span><span class='line'><span class="n">gem</span> <span class="s1">&#39;builder&#39;</span><span class="p">,</span> <span class="s1">&#39;&gt; 2.0.0&#39;</span>
</span><span class='line'><span class="n">gem</span> <span class="s1">&#39;persistent_memoize&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>以下を実行する。
/path/to/octopress/には自分のoctopressのパスを入れよう。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>git clone https://github.com/neilk/octopress-flickr
</span><span class='line'>cd octopress-flickr
</span><span class='line'>find . \( -name '*.rb' -o -name '*.scss' \) -exec cp {} /path/to/octopress/{} \;</span></code></pre></td></tr></table></div></figure>


<p>次にAPIキーをflickrで作成する。
<a href="http://www.flickr.com/services/developer/api/">http://www.flickr.com/services/developer/api/</a></p>

<p>取ってきたAPIキーとシークレットキーを環境変数に入れる。
直接定義ファイルとかに入れないのはセキュリティのためだろうね。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>export FLICKR_API_KEY=your_api_key
</span><span class='line'>export FLICKR_API_SECRET=your_api_secret</span></code></pre></td></tr></table></div></figure>


<p>以上で準備は終わり。Octopressのポストにflickr画像用のタグを挿入する。
まず、flickrの写真を拡大表示した時のURLからパスの最後の数字をとる。
例えば以下のURLだったら、<code>8901098353</code>が画像のIDだ。
<a href="http://www.flickr.com/photos/36392485@N08/8901098353/">http://www.flickr.com/photos/36392485@N08/8901098353/</a></p>

<p>このIDを以下のようにタグに入れ、本文に挿入する。
IDの右の<code>n</code>は画像のサイズ、<code>center</code>は位置、その後ろの文字列はキャプションだ。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>{% flickr_image 8901098353 n center 'sample picture' %}</span></code></pre></td></tr></table></div></figure>


<p>この記事に画像を読み込んだ結果は以下となる。</p>

<p><figure class="flickr-thumbnail center" style="width: 320px;"><a href="http://farm4.staticflickr.com/3694/8901098353_10f5167515_z.jpg" class="fancybox" data-title-id="flickr-photo-8901098353" data-media="photo"><img src="http://farm4.staticflickr.com/3694/8901098353_10f5167515_n.jpg" title="view001" style="width: 320px; height: 281px;"/></a><figcaption id="flickr-photo-8901098353"><h1><a class="flickr-link" href="http://www.flickr.com/photos/36392485@N08/8901098353">view001</a> by kumano_citizen</h1><div class="description">sample picture</div></figcaption></figure></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Octopressに移行]]></title>
    <link href="http://tanstaafl.0pt.jp/blog/2013/05/28/1580cb206a30/"/>
    <updated>2013-05-28T23:48:00+09:00</updated>
    <id>http://tanstaafl.0pt.jp/blog/2013/05/28/1580cb206a30</id>
    <content type="html"><![CDATA[<p>とりあえず、disqus入れてみた。</p>

<p>旧サイト(<a href="http://tanstaafl.0pt.jp/">http://tanstaafl.0pt.jp/</a>)から記事を一式移行するも、
記事名のパスが日本語だとダメのようで、
かといってエスケープすると二重にエスケープされてしまい、
そのままのパスで移行というわけには行かなかった。
しょうがないので、ランダム文字列をファイル名に使用した。
タイトルとは別扱いなのでむしろこっちの方がすっきりしていい。</p>

<p>Jekyllは静的ページなので取り扱いが楽でいい。
スクリプトも拡張しやすそうな作りで、
実際、Octopressのコード見ると結構モンキーパッチあてたりなんかしてて、
ゆるそうで良い。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Octopress始めました]]></title>
    <link href="http://tanstaafl.0pt.jp/blog/2013/05/28/e80bc1782e91/"/>
    <updated>2013-05-28T20:12:00+09:00</updated>
    <id>http://tanstaafl.0pt.jp/blog/2013/05/28/e80bc1782e91</id>
    <content type="html"><![CDATA[<p>BlogをOctpressに移行しようかと思い、作成。
Github/Jekyllベースでシンプルな感じがすき。
しばらくは元ブログからポツポツと移行していこうと思う。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[データが飛んだ]]></title>
    <link href="http://tanstaafl.0pt.jp/blog/2012/06/10/deae7095406a/"/>
    <updated>2012-06-10T01:49:17+09:00</updated>
    <id>http://tanstaafl.0pt.jp/blog/2012/06/10/deae7095406a</id>
    <content type="html"><![CDATA[<p>ブログのデータが飛んだ。ごっそりだ。</p>

<p>原因は、先日sakuraのメンテがあってサーバを再起動したのだが、redisのバイナリデータ保存先であるdump.rdbのパーミッションがredisで無くなっていたためである。ファイル所有者が僕のログインユーザになっていたので作業中になにかミスったのだろうと思うが今となってはどのタイミングで変わったのかは定かではない。</p>

<p>redisの良いところはオンメモリでデータを読み書きしていてとても速いのに、定期的にデータをファイルに書き出して永続化してくれるところだ。dump無しではmemcacheと変わらない。</p>

<p>それよりも、いくら更新の遅いブログとはいえ1年もdumpがおかしくなっていたことに気付いていないのはあんまりなのでもうすこしきっちり管理しようと思う。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[復活&Topsy再び]]></title>
    <link href="http://tanstaafl.0pt.jp/blog/2011/06/13/c21f138e3e26/"/>
    <updated>2011-06-13T23:29:31+09:00</updated>
    <id>http://tanstaafl.0pt.jp/blog/2011/06/13/c21f138e3e26</id>
    <content type="html"><![CDATA[<p>ブログがようやく復活した。</p>

<p>というか、修論＋就職のコンボでメンテ自体してなかったが、
気がついていたらアプリケーション・サーバーが落ちていた。
とりあえずDBがぶっ壊れていたので、Redisにdump.rdbを読み込み直して応急処置をとる。
また、node.jsで書いていたbacktweetのproxyも落ちていたので、
この機会にtopsyを復活させた。</p>

<p>というのもbacktweetもツイートの保持期間があったことと、
以前はこのブログへの言及がtopsyで引っかからないこともあったが、
それが解消されているらしいということで差し戻すことにした。
ただ余りに昔でコードを忘れているので、このサイトを参考にしてTopsyのコードを下に表示するようにした。
さすがにjQueryは楽ちんである。</p>

<p>また勉強用にこのサイトをいじっていきたいと思う。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[コメントシステムにNode.js+Backtweetsを採用]]></title>
    <link href="http://tanstaafl.0pt.jp/blog/2010/11/22/a0f229152618/"/>
    <updated>2010-11-22T14:45:14+09:00</updated>
    <id>http://tanstaafl.0pt.jp/blog/2010/11/22/a0f229152618</id>
    <content type="html"><![CDATA[<p>最近いろいろと試行錯誤を繰り返しているTwitterでのコメントシステムだが、結局Topsyは取りやめた。コメントの一部がうまく反映されないことがあるからだ。</p>

<p>代わりに採用したのがbacktweetsだ。Topsyなどと同様に自分のサイトにリンクしているコンテンツをピックアップしてくれるBacktypeというサービスがある。Disqusにも採用されている便利検索サービスなのだが、そのBacktypeのAPIをラップしてtwitterからのリンクだけを抽出してくれるサービスがbacktweetsである。制限等はBacktypeと同じというかうまくゲートウェイだけ作って、検索等はBacktypeに乗っかっている。なのでAPIも基本的にはBacktypeへのproxyとなっている。</p>

<p>ここで問題なのはbacktypeのAPIにJSONPが含まれていないことである。先日書いたようにJSONではブラウザのXSS対策にひっかかって他サイトのデータを取って来ることが出来ない。そこでproxyサーバを立てて自分のサーバから直接backtweetsのAPIを叩くようにした。サーバに使ったのは最近いじっていて面白いと思っているNode.jsというjavascriptの処理系だ。こいつはイベントループでIOブロックしない並列処理をガリガリかけるのが特徴なようだが今回はただのサーバとして使っている。とはいえ、たかがProxyのためにいくつもプロセスを立ち上げたくはないので、その点スケーラビリティの高いNode.jsは便利である。処理速度もGoogleのV8エンジンがベースになっているので素晴らしく早い。とはいえアプリケーションサーバ内でHTTPアクセスを繰り返しているのでページの読み込みは遅くなってしまう。</p>

<p>対処法として</p>

<p>Sinatraのキャッシュを使って初回のみbacktweetsのAPIを叩くようにする
Ajaxで遅延読み込みを行う
の二つを考えたが、backtweets（というかBacktype）のAPIが1日千回という制限があるのでキャッシュでアクセス回数を押さえられる１のアプローチを取った。ページがキャッシュされてないときだけSinatra側でNode.jsのproxyにアクセスしてデータを取ってくる。これなら読み込みの遅さも随分軽減出来てなかなか快適にTwitterによるコメントシステムを実装出来た。</p>

<p>ただ、これを実装してから気付いたのだがSinatra側で読み込むのであればNode.jsのproxyはそもそも必要ない。とはいえNode.jsの（特にイベントの）勉強になったのと、せっかく作ったのにRubyで作り直すのも勿体ないのでしばらくはこのままで運用しようと思っている。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[JSONとJSONPの違い]]></title>
    <link href="http://tanstaafl.0pt.jp/blog/2010/11/17/75eb52a3779e/"/>
    <updated>2010-11-17T21:12:05+09:00</updated>
    <id>http://tanstaafl.0pt.jp/blog/2010/11/17/75eb52a3779e</id>
    <content type="html"><![CDATA[<p>Twitter APIで取得していたコメントが消えてしまった。Twitter検索で引っかかるのは7日間だけである。これでは少し寂しいのでツイートの取得にTopsyを利用してみた。Topsyはツイッター等の発言をベースにした検索エンジンで、公開されたAPIから特定のサイトについてのツイートを抽出して取得するといったことが出来る。</p>

<p>それでTopsyのAPIをjQueryの機能で取得してみようとしたのだがjsonを取得しようとするとリクエストは200 OKを返すのにデータが取得出来ない。jQueryが原因かと思って色々調べてみたのだが違うようだ。原因はスクリプトの実行元と異なるドメインのデータをxmlHttpRequestでは取得出来ないかららしい。何故このようにしているかというとクロスサイトスクリプティングを防止するためのようだ。しかしこの制限にも抜け道がある。それがJSONPである。</p>

<p>JSONPはscriptタグを利用してリモートのデータを読み込む。JSONの実体がjavascriptのコードであることを利用しているのだ。そしてコールバックを実行してデータを再生する。シンプルな仕組みである。</p>

<p>参考にしたのはここのサイトである（jQueryはJSONPの理解の妨げになるか？）。
僕は今までJSONとJSONPについて違いがよくわかっておらず、単にコールバックを指定するのがJSONPだと思っていた。しかしAjaxの処理にはデータ形式によらずコールバックを使うのだからこれでは違いにならない。scriptタグを利用したデータの読み込みこそがJSONPだったのだ。こういうことはjQueryの解説サイトにはあんまり書いていない。Ajax技術としては常識なんだろうけどjQueryでAjaxを始めた人のためにも是非啓蒙して欲しいと思う。</p>

<p>まとめ</p>

<p>JSONを含め通常Ajaxで使うxmlHttpRequestでは外部サイトのデータを取得出来ない(XSS対策）
JSONPはscriptタグで外部サイトを読み込むことで上記を回避している
jQueryではJSONとJSONPを同じように扱えるが両者はまったく由来の異なる技術である。</p>

<p>JSONはただのデータ形式（javascriptのオブジェクトをtext化したもの）
JSONPはデータを読み込むための技術（javascriptコードの読み込み）</p>

<p>Ajaxではデータの受け渡しの形式としてどちらも用いられている。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iTunesで映画レンタル]]></title>
    <link href="http://tanstaafl.0pt.jp/blog/2010/11/14/eda9ceb4f995/"/>
    <updated>2010-11-14T23:50:42+09:00</updated>
    <id>http://tanstaafl.0pt.jp/blog/2010/11/14/eda9ceb4f995</id>
    <content type="html"><![CDATA[<p>先週からiTunesで映画レンタルが始まった。
試しに借りてみたがなかなか便利でいい。
まだ作品数はそれほど多くないのだがある程度充実したらGEO、ツタヤには行かなくなるんだろうな。
新作¥400、旧作¥200〜300でHDなら¥100増し。期間は30日間だが視聴開始時から2日で強制返却される。
ダウンロード時間は１時間弱くらい。光回線でこれはちょっとなあ。</p>

<p>以下不満点</p>

<p>もう少し作品数が増えて欲しい。権利関係もあるのだろうがハリウッド映画、日本映画以外も増やして欲しい。
料金がちょっと高い。新作¥300、旧作¥200ならよかった。ドラマも連続して借りたら割引とかやって欲しい。そのくらいでリアル店舗のレンタルに対抗出来る。
DLではなくストリーミングして欲しい。見たい映画を見るのに１時間も待っていられない。AppleTVでは出来るのに。差別化だろうか。
メリット</p>

<p>見たいときに見られる。ビデオ屋まで走らなくていい。
返す手間も無い。
メリットがこれだけ？と思うかもしれないが少なくとも僕には十分だ。
とくに返す手間が無いことで延滞の心配をしなくてすんだ。
デメリットもどちらかといえば解消されればなあ程度なので今後も見たい作品があれば普通に利用するだろう。
今までに無い利用形態としては例えばブログや映画批評サイト等で好評の映画があったときにiTunesのリンクから飛んで視聴といったことが考えられる。書籍や漫画でネットのレビューを見た後Amazonのリンク経由で購入することが多いので、映画でも同じように視聴してしまいそうだ。ネット経由でこういう買い方をする人って結構いるんじゃないだろうか。</p>

<p>あと、AppleTVは買うほどでもないと感じた。もっと利用頻度が上がったら手が出るのかもしれない。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Twitterでコメント2]]></title>
    <link href="http://tanstaafl.0pt.jp/blog/2010/11/08/ec3b981577bc/"/>
    <updated>2010-11-08T14:07:59+09:00</updated>
    <id>http://tanstaafl.0pt.jp/blog/2010/11/08/ec3b981577bc</id>
    <content type="html"><![CDATA[<p>前回作ったコメントシステムだがコードは単純だ。TwitterのSearch APIをjQuery.ajaxで叩くだけだ。
戻り値はjsonなので処理も簡単に出来る。ハマったのはcallbackを指定しないとjsonが取れないということだ。APIの説明を読んでもOptionalだと書いてあるのだが、どうも必須なようなので取りあえず空で指定してある。取得するコードは以下でjsonを取得したあとはjQueryを使ってHTMLに挿入している。</p>

<p>var thisurl = encodeURI(encodeURI(decodeURI(window.location.href)));
$.ajax({
  url :&ldquo;<a href="http://search.twitter.com/search.json">http://search.twitter.com/search.json</a>&rdquo;,
  dataType : &ldquo;json&rdquo;,
  data : &ldquo;callback=?&amp;q=&rdquo;+thisurl+&ldquo;&amp;show_user=false&rdquo;,
  success : function(json){
  //表示処理
  }
})</p>

<p>Tweetボタンはここから貼付けた。自動生成で簡単にスクリプトが出来る。
シンプルだがこのブログには十分だろう。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Twitterでコメント]]></title>
    <link href="http://tanstaafl.0pt.jp/blog/2010/11/08/1db91739f81f/"/>
    <updated>2010-11-08T04:15:43+09:00</updated>
    <id>http://tanstaafl.0pt.jp/blog/2010/11/08/1db91739f81f</id>
    <content type="html"><![CDATA[<p>Disqusを止めて、コメントシステムをTwitterで管理するようにした。理由は出来る限りシンプルにしたかったことと、Twitter APIを試してみたかったためである。</p>

<p>ただし、現状コメント機能は無いので外部でつぶやかれたURLをトラックバックするだけの機能である。</p>

<p>追記：とりあえず、Twitter公式のボタンを挿入した。シンプルでよし。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[RailsのYAMLでハマった]]></title>
    <link href="http://tanstaafl.0pt.jp/blog/2010/11/07/fcf18a9ef920/"/>
    <updated>2010-11-07T15:03:38+09:00</updated>
    <id>http://tanstaafl.0pt.jp/blog/2010/11/07/fcf18a9ef920</id>
    <content type="html"><![CDATA[<p>Redmineをインストールしようとしてdatabase.ymlではまった。どういうことかというと、</p>

<p>production:
  adapter:sqlite3</p>

<p>と書いてしまったのが原因でproduction環境でブート出来なくなってしまった。</p>

<p>正解はこちら</p>

<p>production:
  adapter: sqlite3</p>

<p>お分かりだろうか？空白が無いとYamlではハッシュとして認識されない（参考)。
つまらないミスなのだが、どこでハマってるか分からなかったので大分時間を取られてしまった。スペースの書き間違いには気をつけたい。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[SafariのLocationエンコードについて2]]></title>
    <link href="http://tanstaafl.0pt.jp/blog/2010/11/05/a0afd3acb280/"/>
    <updated>2010-11-05T16:01:23+09:00</updated>
    <id>http://tanstaafl.0pt.jp/blog/2010/11/05/a0afd3acb280</id>
    <content type="html"><![CDATA[<p>前回、SafariでエスケープされたURLのサイトを表示したときに、location.hrefでアドレスを取得するとデコードした文字列が取得されてしまう問題について、webkitのブラウザを判別するスクリプトを書いて対応した。
その後、ChromeだとURLがきちんとエスケープされて取得されることが分かった。僕はchromeは普段使わないのでこの仕様の違いに気付かなかったのである。</p>

<p>どうやって判別するか悩んでいたのだが、結局decodeURLでエスケープされていないURLをデコードしても結果が変わらないことに着目して以下の対応とした。</p>

<p>  var disqus_url = encodeURI(decodeURI(window.location.href));</p>

<p>エンコードされたURL（Firefox,Chrome,etc）だけがdecodeURIされ、その後再びencodeURIされるので正しくエスケープされたURLが取得出来る。
URLの下位パスをタイトルから生成していたのでこのような問題となったのだから、そこを改めた方がよいのかもしれない。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[BaiduSpiderを拒否]]></title>
    <link href="http://tanstaafl.0pt.jp/blog/2010/11/02/1fc79729f5b0/"/>
    <updated>2010-11-02T23:58:04+09:00</updated>
    <id>http://tanstaafl.0pt.jp/blog/2010/11/02/1fc79729f5b0</id>
    <content type="html"><![CDATA[<p>最近、アクセス数が徐々に増えてるのでサイトをリニューアルした甲斐があったと喜んでいたら、アクセスの半分が百度ことBaiduのクローラだったことが判明。別段大した負荷もかかってないのだが、他社のBotと比べてちょっと行儀が悪いんじゃないかということで、robots.txtに以下を追加。</p>

<p>User-Agent: baiduspider
Disallow: /</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[SafariのLocationエンコードについて]]></title>
    <link href="http://tanstaafl.0pt.jp/blog/2010/10/31/18ea9bf6b0bc/"/>
    <updated>2010-10-31T23:39:46+09:00</updated>
    <id>http://tanstaafl.0pt.jp/blog/2010/10/31/18ea9bf6b0bc</id>
    <content type="html"><![CDATA[<p>やっぱりDisqusがSafariでうまく動作しない。どうも記事ごとにうまく読み込めるかエラーを起こすが決まっているようなので調べるとうまく動作しないのはタイトルがマルチバイトの記事だけだった。</p>

<p>このブログの各記事のリンクは全てURLをエスケープしてあるのだが、Safariでwindow.location.hrefを取得するとエスケープ前のURLになってしまうのがエラーの原因であるようだ。ちなみにFirefoxでは再現しない。何故このような仕様になっているのか理解に苦しむのだがご存知の方がいたら教えてもらいたい。（バグなんだろうか）。</p>

<p>ちなみに以下のコードを埋め込むことで一応Safariでのエラーは無くなった。あまりスマートなコードではないが仕方が無い。</p>

<p>if(!jQuery.support.checkOn){
  var disqus_url = encodeURI(window.location.href);
}</p>

<p>ちなみにjQueryでのブラウザ判別については「jQuery.supportでのブラウザ判別」を参照した。分かりやすいまとめで助かった。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[フィードの過去ログ読み込み]]></title>
    <link href="http://tanstaafl.0pt.jp/blog/2010/10/31/5656c6c48687/"/>
    <updated>2010-10-31T10:46:40+09:00</updated>
    <id>http://tanstaafl.0pt.jp/blog/2010/10/31/5656c6c48687</id>
    <content type="html"><![CDATA[<p>GoogleReaderが不調なので自分でフィードリーダを実装しようと思い、読み込み部分はsinatraでさっと作ったのはいいがフィードの過去ログの取得方法が分からず、ずっと悩んでいた。共通の呼び出しプロトコルでもあるのかと思えば無いようだし。</p>

<p>調べてやっと分かったのはオンラインリーダは各フィードの取得内容をサイト全体でキャッシュしているので過去ログが見られるらしい。なんじゃそら。随分な力技である。そりゃ今までオンラインリーダしか使っていない人間には分からんよ。過去ログは読み込めて当然だと思ってるし。</p>

<p>ネットで調べてもつまずく人のいない情報はなかなか出てこないのが罠だなと。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Disqus追記]]></title>
    <link href="http://tanstaafl.0pt.jp/blog/2010/10/30/c590b8f6037f/"/>
    <updated>2010-10-30T00:42:25+09:00</updated>
    <id>http://tanstaafl.0pt.jp/blog/2010/10/30/c590b8f6037f</id>
    <content type="html"><![CDATA[<p>コメントシステムのDisqusを使い始めた。残念ながらコメントしてくれる人もいないが、元々Webサービスの習作として作っていて、閲覧しているのは自分だけというBlogだったのでしょうがないだろう。</p>

<p>Disqusを試しに使っていた中で、Safariで読み込まれないというトラブルは解決した。WindowsでのIEも動作確認したので問題ないだろう。もう一つ気になっていたTwitter上でのコメントの同期がしたいという点だが、実はDisqusがそのまま使えることが判明した。</p>

<p>当初TweetMemeやTopsyなどを検討していたのだが、いろいろ調べているうちにTwitterだけでなくYoutubeやFriendFeedからのコメントも拾えるBackTypeというサービスがAPIも公開されていてなかなか便利そうだと思ったので、これの導入を考えていた。調べていて分かったのはDisqus自体がこのAPIを利用していて、Twitterのコメントも拾えるということだった。それでDisqusをそのまま使ってみることにしたわけだ。</p>

<p>結局徒労だったわけだが、いろいろと面白いサービスについて知ることが出来たのでまあよかったと思う。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Disqus]]></title>
    <link href="http://tanstaafl.0pt.jp/blog/2010/10/28/413e8772c8d6/"/>
    <updated>2010-10-28T04:19:17+09:00</updated>
    <id>http://tanstaafl.0pt.jp/blog/2010/10/28/413e8772c8d6</id>
    <content type="html"><![CDATA[<p>ソーシャルプラットフォームのDisqusをコメント用に利用し始めた。Scantyがデフォルトで使うようになっていたからだがなかなか便利だと思う。ただし読み込みが遅いのとSafariで読み込めなかったので、乗り換えを考えている。</p>

<p>結局Twitterでコメントしてもらうのが手っ取り早いのでそれ系のサービスを利用するか自分で実装するかしようと思う。Topsyあたりが良いのかな。</p>

<p>追記:結局タグの閉じ忘れでSafariではWidgetがうまく動いてくれなかっただけだった。
Firefoxではそのあたりがルーズなのが面白い。しばらくはこのまま運用してみたいと思う。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Nginx＋Unicorn＋Sinatra＋Redis]]></title>
    <link href="http://tanstaafl.0pt.jp/blog/2010/10/28/b0558021ecd5/"/>
    <updated>2010-10-28T01:32:46+09:00</updated>
    <id>http://tanstaafl.0pt.jp/blog/2010/10/28/b0558021ecd5</id>
    <content type="html"><![CDATA[<p>このblogはSinatraベースのblogエンジンであるScanty-redisをカスタマイズして使用している。当然データベースにはRedisを使用しているのだが、気持ちいいほどに高速である。KVSなので若干取り扱いに難があったが、SQL初心者からするとSQLより分かりやすいと思う。オンメモリでばしばしデータをさばける上に永続化も自動で行ってくれる優れものだ。</p>

<p>アプリケーションサーバにはRuby製の軽量サーバであるUnicornを使用してある。軽量な上にロードバランシングを自動で行ってくれる優れものだ。</p>

<p>フロントエンドの仕事はポート転送だけなのでHTTPサーバにはこれも軽量なNginxを使用している。これもロードバランサとして非常に優れているのだが今回は単純にリクエストをパスするだけのサーバになっている。</p>

<p>全体的な構成としても非常に軽量でレスポンスの早い構成になった。RailsベースのTypoをHerokuで動かしていたときとは雲泥の差である。今後どんどん発展させていきたいと思う。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[移転完了]]></title>
    <link href="http://tanstaafl.0pt.jp/blog/2010/10/27/70d2dcb66475/"/>
    <updated>2010-10-27T23:09:53+09:00</updated>
    <id>http://tanstaafl.0pt.jp/blog/2010/10/27/70d2dcb66475</id>
    <content type="html"><![CDATA[<p>本ブログを新しいサーバに移転した。VPSも変えてblogエンジンも自分で実装した(scanty-redisベース)。herokuと比べて随分軽くなったように思う。ちなみにherokuから変えた理由はパフォーマンス面よりもデータベースの容量である。無料プラントはいえ5MBではさすがに不安だったからだ。</p>

<p>ちなみに過去の記事の日付がおかしなことになっているがこれは移転を手動で行ったためである。後々その辺りも整備していきたい。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Facebookが流行る理由]]></title>
    <link href="http://tanstaafl.0pt.jp/blog/2010/10/27/107a3d9584f3/"/>
    <updated>2010-10-27T23:05:44+09:00</updated>
    <id>http://tanstaafl.0pt.jp/blog/2010/10/27/107a3d9584f3</id>
    <content type="html"><![CDATA[<p>最近僕の周りでもFacebookが流行り始めている。まだ特定のクラスターだけで流行ってる感じだけれどもそれ以外でもぽつりぽつりと増え始めている。去年のTwitterと同じような動きをしているので期待持てそうだ。</p>

<p>Facebookが流行する理由はいろんな人が挙げている。しかし下敷きとなっているのはTwitterの流行だと思う。TwitterはメッセージングのためのSNSだ。それまでの携帯メールベースのネットワークとは異なるレイヤを日本社会にもたらした。既存のSNSとしてmixiを挙げる人が多いが Mixiはどちらかというと会員制のBlogに近い。リアルタイムのメッセージングツールでは無かったのだ。</p>

<p>もっともTwitterが流行ったからといって人々がFacebookに移行するとは限らない。しかし重要なのはFacebookとTwitterは競合しないしむしろ相乗的な効果を持っているということだ。Facebookはアドレスブック、ないしメッセージボード的な使い方が主流でコンテンツ発信には向いていない。Twitterはリアルタイムに情報を発信する。SNSにおいてユーザーの輪が増えても誰も発信しなければ、いずれ人の流れが止まってしまうだろう。Twitterと連携することでFacebookはつぶやきというコンテンツが絶えず発信されている状態になる。これはリアルタイムの更新を特色とするFacebookにとっては良いことだ。</p>

<p>もちろんFacebook側によいからといって既存のTwitterユーザが移行する理由にはならない。Twitter側のメリットはFacebookがよりクローズドな場を提供してくれることだ。Twitterはオープンなネットワークをもたらすがクローズドな通信機能は貧弱だ。ダイレクトメッセージが頼りだが活用している人は少ない。Twitterでオープンな関係を築いた後Facebook経由で携帯メール等にクローズドな連絡を委譲してそちらでより緊密なネットワークを構築するというのは充分メリットだと思う。そうでなくてもTwitterはソーシャルメディアとしてはあまりにオープンすぎるので単独では限界が来る。実名ベースでクローズドなFacebookが存在意義を確立出来るニッチは充分ある。</p>

<p>逆に窮地に立つのがmixiだ。mixiの欠点はそれ自体がFacebookに劣るというよりTwitterと食い合ってる点にある。mixiはクローズドだがどちらかというとコンテンツ発信に立っている。連絡ツールとしてはmixiは圧倒的に不便である。そしてコンテンツ発信の手軽さではTwitter が有利なのである。mixiには、アカウントは持っている、他人の更新はチェックするが自分は発信しないというユーザーが結構多い。この層を発信、受信どちらも手軽に行えるTwitterに取られてしまっているのが現状だろう。mixiはメッセージングツールになるか、あるいはメッセージングを媒介するアドレスブックになるかを選択すべきだったのだが中途半端な状態のまま来てしまった。mixiはゲームやニュース等メディア化して生き残ろうとしているが、それはYahooのようなオープンなポータルに変わるということである。SNSとしては死ぬのではないか。</p>

<p>日本人としてはmixiに頑張って欲しい。けれどもFacebookの方がポジションがはっきりして分かりやすい、使いやすいというのもまた事実である。多分今後の流行としてはTwitterが主流になっていく裏でFacebookとmixiのポジション争いが行われるだろう。今後mixiが生き残っていけるかはこれまで築いたネットワークをどうソーシャルな「場」に転換していくかが重要だと僕は思う。</p>
]]></content>
  </entry>
  
</feed>
